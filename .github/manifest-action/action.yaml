name: 'Generate Manifest'
description: 'Create the manifest for a Jellyfin plugin'

inputs:
  path:
    required: true
    default: './plugin_1.0.0.0.zip'
    description: 'The path to the zip of the built plugin (default: "./plugin_1.0.0.0.zip")'
  repo-slug:
    required: true
    default: ''
    description: 'The plugin repository name including its owner (default: "")'
  plugin-name:
    required: false
    default: ''
    description: 'The name of the plugin (default: "plugin" / value parsed from inputs.path)'
  plugin-version:
    required: false
    default: ''
    description: 'The version of the plugin (default: "1.0.0.0" / value parsed from inputs.path)'

outputs:
  artifact:
    description: 'Returns the generated manifest'
    value: ${{ steps.build.outputs.artifact }}

runs:
  using: composite
  steps:
    - name: Checkout JPRM
      uses: actions/checkout@v3
      with:
        repository: oddstr13/jellyfin-plugin-repository-manager
        path: './jprm'

    - name: Setup JRPM Deps
      shell: bash
      run: |-
        python3 -m pip install -r ./jprm/requirements.txt

    - name: Run JPRM build
      id: build
      shell: bash
      run: |-
        echo "::group::Manifestin' away"

        PLUGIN_ZIP=$(basename ${{ inputs.path }})
        PLUGIN_FILE_NAME=${PLUGIN_ZIP%.*}

        if [[ -n "${{ inputs.plugin-name }}" ]]; then
          PLUGIN_NAME="${{ inputs.plugin-name }}"
        else
          PLUGIN_NAME="$(echo "${PLUGIN_FILE_NAME}" | cut -d "_" -f 1)"
        fi

        if [[ -n "${{ inputs.plugin-version }}" ]]; then
          PLUGIN_VERSION="${{ inputs.plugin-version }}"
        else
          PLUGIN_VERSION="$(echo "${PLUGIN_FILE_NAME}" | cut -d "_" -f 2)"
        fi

        SOURCE_URL="${{ github.server_url }}/${{ inputs.repo-slug }}/releases/download/${PLUGIN_VERSION}/${PLUGIN_NAME}_${PLUGIN_VERSION}.zip"
        echo "SOURCE_URL: ${SOURCE_URL}"
                
        python3 ./jprm/jprm/__init__.py --verbosity=debug repo init ./manifest.json
        python3 ./jprm/jprm/__init__.py --verbosity=debug repo add ./manifest.json ${{ inputs.path }} -U "${SOURCE_URL}"
        
        echo "::set-output name=artifact::manifest.json"
        echo "::endgroup::"
